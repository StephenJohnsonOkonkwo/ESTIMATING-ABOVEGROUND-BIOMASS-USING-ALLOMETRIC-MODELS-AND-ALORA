Octave was configured for "x86_64-w64-mingw32".

Additional information about Octave is available at https://www.octave.org.

Please contribute if you find this software useful.
For more information, visit https://www.octave.org/get-involved.html

Read https://www.octave.org/bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type 'news'.

>> cd 'C:/Users/Steve/Desktop/Adaptive Filtering Project'

>> load ("ZachDatalnAGBlnDlnDHlnD2HlnD2HW.txt")

>> size (ZachDatalnAGBlnDlnDHlnD2HlnD2HW)

ans =

   482     5

>> corr (ZachDatalnAGBlnDlnDHlnD2HlnD2HW)

ans =

   1.00000   0.76204   0.81568   0.80867   0.85002
   0.76204   1.00000   0.92529   0.97319   0.94118
   0.81568   0.92529   1.00000   0.98771   0.95184
   0.80867   0.97319   0.98771   1.00000   0.96505
   0.85002   0.94118   0.95184   0.96505   1.00000

>> %%% Splitting The Data into Two

>> P = 0.80 ;

>> n = 482

n =  482
>> idx = randperm(n)  ;

>> Train_Data =  ZachDatalnAGBlnDlnDHlnD2HlnD2HW(idx(1:round(P*n)),:)

Train_Data =

    3.3084    3.3673    6.1399    9.5072    8.7307
    5.0038    3.7295    6.8789   10.6084   10.2079
    4.0267    3.7377    6.7581   10.4958   10.3094
    4.1479    3.4965    6.3587    9.8552    9.4985
    5.5151    4.5109    7.9286   12.4394   12.0390
    5.0628    3.6738    6.5915   10.2653   10.0790
    5.2459    4.5850    7.8621   12.4471   11.6261
    4.4253    4.2195    7.3550   11.5745   10.7980
    3.1881    2.9957    5.5215    8.5172    8.1315
    3.4255    3.1355    6.2265    9.3620    8.5411
    4.0065    3.3322    6.1356    9.4678    9.2446
    3.7999    3.0445    5.9067    8.9512    8.6227
    3.2270    3.3322    6.0064    9.3386    8.5620
    4.0183    3.4751    6.3083    9.7833    9.5602
    4.1694    3.2581    6.2945    9.5526    9.0250
    3.8150    3.7013    6.3755   10.0768    9.6612
    5.3021    3.6198    6.7622   10.3820   10.1957
    3.3446    3.1355    5.5334    8.6689    8.3404
    3.8043    3.4340    6.5020    9.9360    9.5794
    3.8052    3.1987    6.3973    9.5960    9.4097
    3.6654    3.4340    6.2672    9.7012    9.2392
    3.4163    3.1355    5.3868    8.5223    8.2478
    3.8977    3.1987    6.0751    9.2737    8.8582
    3.7411    3.1355    5.7382    8.8737    8.5452
    4.0108    3.5835    6.6746   10.2581   10.0718
    4.0334    3.2189    6.0958    9.3147    8.9142
    3.0047    3.2189    6.0521    9.2710    7.7103
    4.0755    3.0755    5.8266    8.9020    8.7157
    4.9189    3.8177    6.7489   10.5666   10.1661
    3.0841    2.9957    5.8861    8.8818    8.0143
    4.5746    4.0431    6.9608   11.0039   10.4930
    3.4842    3.0204    5.6595    8.6799    8.3514
    4.0302    3.5973    6.4451   10.0424    9.3691
    3.7857    3.4340    6.2962    9.7302    8.9962
    2.9354    2.9957    5.3936    8.3894    8.0327
    4.1935    3.5973    6.4737   10.0710    9.6555
    4.3502    4.2767    6.9508   11.2275   10.3359
    4.3149    3.1570    6.3033    9.4603    9.2740
    5.6659    4.1821    7.2384   11.4205   11.2341
    4.1093    3.2504    6.1573    9.4077    9.0072
    5.3081    3.7764    7.0017   10.7781   10.5918
    3.6136    3.2958    5.7807    9.0766    8.6761
    5.7830    4.7005    8.0327   12.7332   11.9566
    5.0889    3.6281    6.7859   10.4140   10.0135
    4.5585    4.0604    6.9508   11.0113   10.6108
    3.2243    3.0445    5.7187    8.7632    8.4065
    4.7858    3.5835    6.4877   10.0712    9.8849
    3.1000    3.0445    5.5294    8.5740    8.2454
    3.8857    3.5322    6.6892   10.2215    9.3299
    4.7367    4.4998    8.1505   12.6503   11.5416
    3.9096    3.2958    6.3404    9.6362    9.5308
    3.2806    3.1046    5.4072    8.5118    8.1261
    3.8334    3.2581    6.4362    9.6942    8.9603
    4.1448    3.7612    6.7316   10.4928   10.0923
    3.2593    3.0445    5.6836    8.7281    8.3996
    3.6469    3.6243    6.4576   10.0819    9.2609
    3.0692    3.2958    6.0039    9.2997    8.4322
    4.5315    4.1744    7.2189   11.3933   10.9928
    3.4095    3.4340    5.7366    9.1706    8.9092
    3.0761    2.9957    5.7683    8.7641    8.2364
    3.9137    3.4012    6.5147    9.9159    9.5874
    4.6726    3.3250    6.2265    9.5515    9.2230
    3.7693    3.1355    6.1800    9.3155    8.9588
    4.1738    3.4812    6.4124    9.8937    9.4782
    4.3321    3.5337    6.5418   10.0755    9.8892
    5.8149    4.7005    7.9586   12.6591   12.1970
    3.2213    2.9957    5.7366    8.7323    8.2703
    4.1748    3.4812    6.3434    9.8247    9.4962
    3.2361    2.9957    5.6699    8.6656    8.5603
    4.8924    3.5990    6.6111   10.2100   10.0237
    5.0538    4.7005    7.7915   12.4920   11.9812
    5.0089    3.6876    6.6384   10.3260   10.1397
    3.6502    3.1570    5.6827    8.8397    8.5784
    4.2461    4.0775    7.2556   11.3331   10.4415
    4.1536    3.7377    6.7334   10.4711    9.0440
    4.8355    3.6981    6.6938   10.3919   10.0634
    3.6777    3.5264    6.4167    9.9431    9.4811
    3.9719    3.6376    6.6333   10.2709    9.9142
    4.8077    3.9318    6.9022   10.8341   10.7287
    4.0190    3.5553    6.8695   10.4249    9.9141
    3.8818    3.6376    6.3784   10.0160    9.7546
    5.0891    3.9318    7.2090   11.1408   10.7403
    3.4039    2.9957    5.5215    8.5172    8.1887
    4.7691    4.3567    7.6148   11.9715   11.4094
    3.8883    3.4657    6.2383    9.7041    9.3036
    3.8872    3.5056    6.5736   10.0792    9.3026
    3.9489    3.5973    6.8162   10.4135    9.5925
    3.4455    2.9957    5.6348    8.6305    8.3020
    3.7465    3.3322    6.4457    9.7779    9.4069
    3.7937    3.6109    6.1759    9.7868    9.5254
    3.7644    3.1355    6.1059    9.2414    9.1360
    3.8214    3.2504    5.8153    9.0657    8.7372
    4.6463    3.7013    7.0335   10.7348    9.8673
    3.7903    3.4657    6.4102    9.8759    9.6145
    4.8484    4.1821    7.5998   11.7818   10.9608
    5.0753    3.8089    6.9356   10.7445   10.3440
    3.5891    3.1355    6.3742    9.5097    9.0476
    3.1904    3.1355    5.9081    9.0436    8.1520
    5.1626    4.4543    7.5898   12.0442   11.2232
    4.3284    3.7728    6.9083   10.6810   10.3100
    4.3401    4.0943    6.8352   10.9295   10.4187
    2.6219    2.9957    5.1930    8.1887    7.4547
    4.7841    3.7184    6.7384   10.4568   10.2705
    4.1092    3.7612    7.0383   10.7995   10.2887
    4.0421    3.4012    6.4216    9.8228    9.4661
    3.6531    3.3322    5.9713    9.3035    8.9178
    3.4368    3.9120    5.0106    8.9227    8.5071
    5.6990    4.4998    7.7482   12.2481   11.8770
    3.8306    3.1298    6.0674    9.1972    8.3056
    4.0798    3.5904    6.2472    9.8376    9.3268
    4.7978    3.9318    7.1099   11.0417   10.3077
    4.8031    3.5234    6.3219    9.8453    9.6590
    4.9409    4.4773    7.8785   12.3559   11.4643
    3.8842    3.3673    6.5243    9.8916    9.5059
    4.0286    3.6687    6.6391   10.3078    9.9793
    4.7144    5.8435    8.6469   14.4904   14.1194
    3.9206    3.7612    6.4353   10.1965    9.9221
    3.7091    3.2189    6.2634    9.4823    9.0668
    3.3328    3.0634    5.9256    8.9890    8.6605
    4.3652    3.8286    7.0673   10.8960   10.0044
    3.6845    3.4751    6.1831    9.6582    9.2871
    3.3543    3.4657    6.3835    9.8492    8.4221
    3.4174    3.3142    5.7565    9.0707    8.8094
    4.6665    3.6407    6.5311   10.1718    9.7862
    4.2227    3.6177    6.7312   10.3488    9.5723
    3.9009    3.3411    6.0491    9.3902    9.0617
    4.6518    4.2195    7.4483   11.6678   10.5592
    4.6215    3.7436    6.8346   10.5783   10.2497
    3.9048    3.4812    6.4257    9.9069    9.4449
    4.6297    3.7842    6.5723   10.3565   10.1701
    3.0452    3.1355    5.2756    8.4111    7.9490
    3.3741    3.5264    5.8289    9.3553    8.8933
    4.5092    4.2556    7.1460   11.4016   10.5100
    4.4879    3.2753    6.0472    9.3225    8.9940
    3.3342    3.1355    5.8096    8.9451    8.0535
    3.9674    3.0445    5.3718    8.4163    8.3110
    4.7551    3.5729    6.6864   10.2593    9.4828
    3.2967    2.9957    5.4381    8.4338    8.2107
    4.2030    4.0604    7.2174   11.2779   10.3863
    2.8455    3.1355    5.7004    8.8359    7.9443
    4.3002    3.7955    6.9525   10.7480    9.8564
    3.1671    3.0681    5.4194    8.4875    8.1308
    3.5611    3.0204    5.8536    8.8741    8.7687
    5.2216    4.6250    8.0427   12.6677   12.1056
    4.9542    3.6152    6.5056   10.1208    9.7204
    4.0302    3.5973    6.4451   10.0424    9.3691
    3.0857    3.1355    5.3327    8.4682    8.0677
    3.5320    3.0910    6.0615    9.1525    8.8240
    3.2532    3.1355    5.9687    9.1042    8.2126
    4.0753    3.5835    6.3561    9.9396    9.5391
    5.4494    4.6821    7.8391   12.5213   12.2599
    4.2235    3.1781    5.9349    9.1129    8.9266
    4.3814    4.1744    7.4325   11.6069   10.3339
    3.0939    3.0910    5.8944    8.9854    8.1645
    4.1742    4.0254    6.9431   10.9685    9.6955
    3.8730    4.2047    7.2251   11.4298    9.8692
    3.3828    3.0910    5.9814    9.0725    8.6868
    3.8260    3.1591    5.5105    8.6696    8.5643
    3.7756    3.5553    6.3886    9.9439    9.6154
    4.5232    4.0289    7.1752   11.2041   10.3125
    3.4445    3.4657    6.0684    9.5342    8.6667
    4.4537    3.4889    6.5453   10.0342    9.8478
    3.8428    3.2581    6.0615    9.3196    8.9191
    3.5343    3.4657    5.9915    9.4572    9.2215
    4.0021    3.6889    6.8244   10.5133    9.7793
    3.3742    3.2581    5.8230    9.0811    8.4078
    4.6222    3.8177    6.9532   10.7709   10.4424
    4.5187    3.4427    6.3834    9.8261    9.4976
    5.1676    3.7377    6.8732   10.6108   10.2104
    3.3067    5.4596    8.0245   13.4841   13.2978
    4.2083    3.8286    6.9422   10.7708   10.5477
    4.3267    3.4657    6.6082   10.0739    9.8876
    4.1930    3.8712    6.6746   10.5458   10.1453
    4.5768    3.3628    6.5765    9.9393    9.7529
    3.1866    3.0910    5.7652    8.8562    8.3454
    3.2129    3.2581    5.7430    9.0011    8.2877
    4.7576    3.6738    6.5451   10.2188    9.8903
    3.8794    3.3322    6.2500    9.5822    9.3590
    3.5202    3.2189    6.4175    9.6364    9.2359
    4.5375    4.2905    7.5291   11.8196   10.6802
    4.1604    3.8067    6.8512   10.6578    9.8813
    3.7506    3.2027    6.0360    9.2387    9.1333
    3.5102    3.1781    5.9506    9.1287    8.6011
    5.5202    3.9871    6.9829   10.9700   10.6415
    3.9781    3.8067    6.4094   10.2160    9.8450
    4.8944    3.4794    6.7565   10.2359   10.0496
    4.5677    4.2556    7.1598   11.4154   11.0869
    4.8435    3.7377    7.1472   10.8848    9.9932
    4.8283    4.3041    7.5812   11.8853   11.2504
    3.1554    3.3499    5.8756    9.2255    8.4490
    4.7151    3.9512    7.0423   10.9935   10.5931
    4.8071    4.2195    7.6695   11.8890   11.3269
    3.5082    3.0910    5.9243    9.0153    8.6148
    3.8995    3.1987    5.8899    9.0886    8.9832
    3.8533    3.7612    6.5338   10.2950    9.6411
    4.2495    4.0254    7.0699   11.0952   10.2036
    3.5764    3.2581    6.0615    9.3196    8.9485
    4.7945    3.4782    6.4278    9.9060    9.7197
    4.5252    3.2414    6.0910    9.3324    9.1461
    4.2190    3.5835    6.6970   10.2806    9.5466
    3.9496    3.1987    6.3342    9.5328    9.1618
    3.9989    3.1925    5.8136    9.0061    8.6776
    3.5829    3.1822    6.1267    9.3089    8.9804
    3.5590    3.2771    5.8421    9.1192    8.7626
    4.2221    3.7377    6.7081   10.4458   10.1310
    4.6368    3.9890    7.4547   11.4437   10.9817
    3.8152    3.4012    6.1420    9.5432    8.1161
    4.3786    3.5973    6.8745   10.4718    9.9609
    3.5972    3.0910    6.2046    9.2956    8.9389
    4.4147    3.5160    6.7044   10.2204    9.8200
    3.8980    3.5835    6.5793   10.1628    9.0233
    3.1550    3.1355    5.0814    8.2169    8.1115
    4.3098    3.6889    6.7569   10.4458    9.6248
    5.3196    4.2641    7.3887   11.6527   11.5474
    3.9774    4.2195    7.6039   11.8234   11.0024
    4.4368    3.3673    6.4696    9.8369    9.5756
    4.0270    3.3844    6.5624    9.9468    9.4848
    3.1151    3.1355    6.1312    9.2667    8.1273
    3.2885    3.1046    6.0750    9.1796    8.4031
    5.8011    4.4427    8.2821   12.7248   12.2305
    5.0724    3.8401    6.8069   10.6470   10.4607
    3.0984    3.0910    6.0868    9.1778    8.3103
    3.3507    3.1355    6.3936    9.5291    8.6375
    4.2792    3.4965    5.8788    9.3753    9.0468
    4.7693    3.8221    7.0802   10.9023   10.5738
    4.4120    3.5695    6.8082   10.3777    9.9773
    3.4553    3.1781    5.9814    9.1595    8.8310
    4.8443    3.9348    6.8525   10.7873   10.5259
    4.5557    3.4598    6.4214    9.8812    9.5527
    4.6542    3.6243    6.8128   10.4371   10.0366
    3.6412    3.1135    5.9757    9.0892    8.9029
    3.8448    3.5322    6.7709   10.3031    9.5692
    4.5934    3.4617    6.4254    9.8871    9.5586
    3.3756    2.9957    5.4381    8.4338    8.2475
    5.1217    4.3820    7.7664   12.1484   11.7022
    3.8397    3.4657    6.1041    9.5698    8.7023
    3.5580    3.3499    5.9526    9.3025    9.0411
    4.7113    3.7842    6.6268   10.4110    9.9954
    4.1924    3.5337    6.5418   10.0755    9.8892
    3.3320    3.2581    5.6095    8.8676    8.5391
    3.1904    3.1355    5.9081    9.0436    8.1520
    2.9820    3.1355    5.5778    8.7133    8.0202
    5.4855    4.1431    7.2677   11.4108   10.5192
    4.4669    3.2809    6.1374    9.4183    9.2320
    5.1293    3.8816    7.0171   10.8986   10.4981
    4.1046    3.6109    6.4731   10.0840    9.7130
    3.6152    3.6889    6.5793   10.2681    8.7985
    3.6061    3.2958    5.8608    9.1566    8.8953
    3.4459    3.0082    5.5537    8.5618    8.2052
    5.2240    3.9120    7.2964   11.2084   10.8080
    4.8328    4.3175    7.5946   11.9121   10.8035
    3.6065    3.0681    6.1816    9.2496    8.8929
    3.6490    3.5322    6.2731    9.8053    8.6659
    4.1070    3.5766    6.5597   10.1363    9.3153
    2.9507    2.9957    5.6699    8.6656    7.9523
    4.0723    3.2484    6.3048    9.5532    9.3669
    4.2885    3.7013    6.8794   10.5807   10.1950
    3.8010    3.1023    6.1349    9.2372    8.9087
    4.0510    3.4812    6.6382   10.1195    9.9332
    3.0293    2.9957    5.8289    8.8247    8.1113
    4.4827    3.8918    7.0488   10.9406   10.6793
    3.7387    3.7136    6.3163   10.0298    9.7685
    3.5341    3.2771    5.8798    9.1570    8.7415
    5.1986    3.8286    7.0771   10.9057   10.0382
    3.4842    3.0204    5.6595    8.6799    8.3514
    3.5914    3.4500    5.9757    9.4257    9.0690
    4.1709    3.6243    6.8630   10.4874   10.1017
    4.1597    3.7612    6.9599   10.7211   10.0862
    3.8789    3.5115    6.5796   10.0911    9.6907
    3.9701    3.5115    6.2841    9.7957    9.3952
    3.5200    3.2581    6.4151    9.6732    8.8522
    4.5218    3.4782    6.1523    9.6305    9.3020
    4.7475    4.4773    7.5684   12.0457   11.1541
    4.5187    3.4427    6.3834    9.8261    9.4976
    4.2128    3.2149    5.8959    9.1108    8.9244
    4.6955    3.6402    6.6728   10.3130    9.9845
    3.6055    3.2581    5.7430    9.0011    8.8957
    3.4140    3.4657    6.1048    9.5705    8.7030
    4.1358    3.7257    6.8392   10.5649   10.3418
    3.5974    3.3673    6.5243    9.8916    9.2182
    4.2383    3.5013    6.2415    9.7429    9.4144
    4.7069    3.5695    6.5140   10.0835    9.8972
    4.5241    4.3820    7.5390   11.9211   10.6481
    5.3374    4.3307    7.6980   12.0288   11.2078
    3.7772    3.3322    6.3526    9.6848    9.2228
    4.4183    3.3844    6.1412    9.5256    9.2643
    4.6696    3.6533    6.3065    9.9597    9.5887
    5.2301    3.9192    7.0897   11.0089   10.6084
    5.1507    3.7785    6.5505   10.3289   10.0004
    4.1858    3.3520    6.1450    9.4970    9.0965
    4.2306    3.4095    6.3273    9.7368    9.5504
    4.6644    4.2254    7.1157   11.3411   10.9701
    4.2934    3.7612    6.4353   10.1965    9.7345
    3.8794    3.4340    6.6727   10.1067    9.6446
    3.1726    2.9957    5.6348    8.6305    8.1685
    4.5606    3.5752    6.3396    9.9147    9.5862
    4.7889    3.8712    6.7334   10.6046   10.2041
    6.2310    5.4596    9.1485   14.6081   14.1618
    4.1531    3.7842    7.0800   10.8642   10.0432
    5.7005    4.0641    7.1709   11.2349   10.8345
    3.4126    3.4012    6.4216    9.8228    8.9553
    4.3321    3.5337    6.5418   10.0755    9.8892
    4.3438    3.2542    5.8115    9.0657    8.7372
    4.0267    3.7377    6.7581   10.4958   10.3094
    5.1479    4.0802    7.2368   11.3171   11.1307
    4.6528    3.6889    6.5073   10.1962   10.0908
    4.4490    3.7136    7.1313   10.8449   10.0239
    3.5914    3.4500    5.9757    9.4257    9.0690
    4.1615    3.6376    6.7731   10.4107    9.5191
    3.1170    3.0910    5.3423    8.4334    8.3280
    3.6654    3.4340    6.2672    9.7012    9.2392
    4.4001    3.6125    6.4742   10.0867    9.3102
    3.9920    3.2484    6.1388    9.3872    9.0306
    5.0979    4.2767    7.5909   11.8675   11.3054
    3.6842    3.2027    5.6451    8.8478    8.4768
    3.8647    3.1987    5.9395    9.1382    8.8768
    5.1869    4.6540    8.2513   12.9052   12.5048
    3.3877    3.4340    6.2672    9.7012    8.8802
    5.3534    4.3307    7.5694   11.9001   11.0792
    3.8860    3.1355    6.3342    9.4697    9.1412
    4.3623    3.3586    6.1919    9.5505    9.2220
    4.2565    3.4965    6.9465   10.4430    9.9810
    4.0853    3.2515    6.1891    9.4406    9.0696
    3.5697    3.2581    6.1485    9.4066    9.0781
    3.7506    3.2027    6.0360    9.2387    9.1333
    3.0663    3.0445    5.7187    8.7632    8.0292
    2.7090    2.9957    5.3936    8.3894    7.5454
    4.9825    4.0775    7.4274   11.5050   10.6375
    4.4827    3.6889    6.6464   10.3353   10.0068
    3.1928    2.9957    5.8861    8.8818    8.1053
    5.0474    4.3175    7.7352   12.0527   11.5419
    4.8035    4.2767    7.5153   11.7920   11.1571
    3.2559    3.1355    5.7004    8.8359    8.4793
    3.7751    3.4111    6.2444    9.6555    9.4198
    4.2665    3.3534    6.3366    9.6900    9.0166
    4.1700    3.7013    6.9784   10.6797   10.0064
    3.6818    3.4340    6.2066    9.6406    9.4048
    4.9890    3.8243    7.0363   10.8606   10.4601
    4.6631    3.6376    6.6328   10.2704    9.8699
    5.7356    5.5215    8.8356   14.3571   13.0841
    4.0244    3.2581    6.5352    9.7933    9.5702
    4.3787    3.5337    6.3370    9.8707    9.4703
    4.3611    3.2832    6.2699    9.5530    9.2245
    3.9196    3.4673    6.5118    9.9791    9.0875
    4.8567    3.5695    6.7682   10.3377    9.9373
    3.8784    3.1463    5.7490    8.8953    8.4948
    4.3072    3.5160    6.5605   10.0765    9.3426
    4.3849    4.3175    7.3379   11.6554   10.8344
    4.4490    3.7136    7.1313   10.8449   10.0239
    3.4466    3.8712    6.3135   10.1847    8.7576
    3.5188    2.9987    5.4626    8.4613    8.1999
    3.8779    3.2426    6.3106    9.5532    9.2247
    3.2860    3.1570    5.8651    9.0221    8.1546
    5.8910    4.9185    8.3029   13.2214   13.1161
    4.1279    3.2189    6.0707    9.2896    8.9611
    3.9067    3.4177    6.6164   10.0341    9.7728
    4.6134    3.8501    7.0488   10.8990   10.1650
    3.1574    3.0681    6.2869    9.3550    8.4634
    4.6631    3.6376    6.6328   10.2704    9.8699
    5.2197    4.6728    8.3741   13.0470   12.4848
    3.5613    3.1570    5.9902    9.1472    8.9609
    3.8513    3.6376    6.3117    9.9493    9.6208
    3.9044    3.4657    5.6058    9.0715    8.8102
    4.5372    3.6889    6.7334   10.4223    9.8602
    3.6420    3.5553    6.5511   10.1064    9.5443
    3.6842    3.2027    5.6451    8.8478    8.4768
    5.5486    3.8857    7.0298   10.9155   10.7292
    3.8305    3.8712    6.7044   10.5756    9.7546
    4.9591    4.7005    7.9586   12.6591   11.5196
    4.4290    3.6889    6.8876   10.5764   10.1144
    5.2682    4.1271    7.5283   11.6555   10.5160
    3.0595    3.2581    5.5607    8.8188    7.9272
    4.9591    4.7005    7.9586   12.6591   11.5196
    5.4432    4.9416    8.4970   13.4386   12.9278
    3.7316    3.2189    6.1366    9.3555    8.5345
    5.5448    3.9756    7.2788   11.2543   10.7600
    5.0998    3.9551    7.2132   11.1683   10.2767
    4.9171    3.5630    6.7037   10.2668    9.8663
    3.5876    3.2581    6.1759    9.4340    9.0335
    3.5654    3.4657    5.7683    9.2341    8.8916
    3.6622    3.1355    6.1312    9.2667    8.7391
    3.2869    3.1781    5.4806    8.6587    8.2876
    4.1744    3.2771    6.3217    9.5988    9.4935
    4.5998    3.5835    6.4733   10.0569    9.7283
    3.5780    3.5553    6.0403    9.5956    9.1951
    3.7085    3.4420    6.1666    9.6086    8.9353

>> Test_Data =  ZachDatalnAGBlnDlnDHlnD2HlnD2HW(idx(round(P*n)+1:end),:)

Test_Data =

    4.3719    3.7377    6.7581   10.4958   10.2600
    3.8314    3.3322    6.4232    9.7555    9.3988
    4.4097    3.8712    7.0699   10.9411   10.2071
    4.3379    3.9318    6.7940   10.7259   10.4645
    3.3115    3.5553    5.7526    9.3079    8.4404
    4.3250    4.2341    7.3911   11.6252   10.7336
    3.7346    3.0681    5.8406    8.9087    8.7224
    4.6953    3.8067    6.9202   10.7268   10.3558
    4.5403    3.9020    7.0590   10.9609   10.1400
    4.0510    3.4812    6.6382   10.1195    9.9332
    3.7413    3.7728    6.6350   10.4077    9.5161
    4.1702    3.7612    6.5646   10.3258    9.9253
    4.3253    4.0604    6.8013   10.8617   10.3997
    3.6364    3.2387    6.1009    9.3396    8.6056
    3.1989    2.9957    5.5607    8.5564    7.7799
    4.7523    4.2579    7.3929   11.6508   10.0902
    4.7131    3.4340    6.5528    9.9868    9.8005
    3.5427    2.9957    6.2729    9.2686    8.7410
    2.8056    3.2581    5.1299    8.3880    7.7147
    3.8082    3.1987    6.1562    9.3549    8.8928
    3.7394    3.4657    5.8171    9.2828    8.9118
    4.7310    4.1744    7.2189   11.3933   10.5723
    3.3920    3.0681    5.6707    8.7388    8.3383
    3.4237    3.1781    6.1738    9.3518    8.6179
    3.6524    3.2771    6.0497    9.3269    9.2215
    4.0039    3.6243    6.7154   10.3397    9.8454
    3.7315    3.4177    6.6366   10.0543    9.4922
    4.3484    3.6889    7.0031   10.6919   10.1811
    3.2711    3.0910    5.9814    9.0725    8.5616
    3.7378    3.2581    5.9493    9.2074    8.8070
    3.3526    3.4657    5.9081    9.3738    8.6398
    3.6425    3.5264    6.4968   10.0231    9.3498
    3.7331    3.4657    6.6644   10.1301    9.3536
    4.1481    3.7377    6.6554   10.3931   10.0364
    4.9428    4.0254    7.6089   11.6342   10.7426
    4.0087    3.8565    6.9700   10.8265    9.9349
    4.2997    3.4121    6.1195    9.5317    9.1312
    5.9041    4.6475    7.9750   12.6225   12.2220
    3.8772    3.4657    6.2538    9.7196    9.0062
    3.7074    3.2581    5.8608    9.1189    8.8575
    3.3156    3.1570    5.4596    8.6166    8.2455
    3.8494    3.4657    6.5103    9.9760    9.6475
    4.1358    3.7257    6.8392   10.5649   10.3418
    3.3749    3.1179    5.9213    9.0393    8.6682
    5.7195    4.7875    8.4381   13.2256   12.8252
    4.0775    3.4455    6.2483    9.6938    8.9173
    3.9625    3.2189    5.9182    9.1371    8.4638
    4.8761    4.5539    7.8681   12.4219   11.6010
    4.6665    3.6407    6.5311   10.1718    9.7862
    4.6324    3.4148    6.3184    9.7332    9.5468
    3.1008    3.0910    5.8319    8.9229    8.2496
    4.3770    3.7336    6.5466   10.2802    9.3886
    4.8991    3.7842    6.9197   10.7039   10.3034
    4.5372    3.5163    6.6222   10.1386    9.9522
    4.6816    4.3041    7.0767   11.3807   11.0522
    5.3229    4.5539    7.7526   12.3064   11.5299
    5.3640    4.0371    7.1501   11.1872   10.7867
    3.5177    2.9957    5.7366    8.7323    8.3756
    5.1907    4.7185    8.4562   13.1747   11.6140
    3.2875    3.0445    5.6472    8.6917    8.4304
    4.8798    4.2669    7.5250   11.7919   11.2298
    4.5328    4.2195    7.3550   11.5745   10.7305
    3.6774    3.2465    5.8712    9.1177    8.2261
    4.0772    3.2581    6.2785    9.5366    8.1095
    5.5557    3.7901    6.9212   10.7113   10.3108
    4.3675    3.3579    6.2539    9.6118    9.2833
    3.3915    3.3322    6.1048    9.4370    9.0803
    4.5235    3.9675    6.8852   10.8527   10.1187
    3.7093    3.2581    6.3491    9.6072    9.1917
    4.7807    3.5205    6.6775   10.1979   10.0116
    4.2246    3.3555    6.4610    9.8165    8.9249
    3.5129    3.1355    5.9389    9.0743    8.8880
    3.8550    3.6889    6.7093   10.3982    9.6848
    3.7587    3.7136    6.6580   10.3716    9.5951
    3.7405    3.3499    6.2403    9.5902    8.6986
    5.6648    4.6821    8.3197   13.0018   11.7289
    3.0918    3.1355    5.7746    8.9100    8.1335
    4.9189    3.8177    6.7489   10.5666   10.1661
    4.3659    3.8067    6.7771   10.5837   10.1981
    3.4908    3.2581    6.0307    9.2888    8.9321
    3.6746    3.4751    6.2784    9.7535    9.4250
    4.5489    3.6177    6.8061   10.4237    9.6027
    4.7148    4.1109    7.2244   11.3353   10.6619
    3.4845    3.4340    6.2066    9.6406    8.9272
    4.1651    3.7612    6.6516   10.4128   10.0843
    6.1271    5.3706    9.1318   14.5025   13.6815
    3.2923    3.0910    5.8319    8.9229    8.5662
    3.7587    3.7136    6.6580   10.3716    9.5951
    4.1530    3.6376    6.8565   10.4940    9.6025
    4.7822    4.6250    7.7820   12.4069   11.2675
    4.0277    3.3142    6.1023    9.4165    9.2301
    2.9924    3.0910    5.3423    8.4334    7.7200
    4.0045    3.1059    5.7079    8.8138    8.4133
    4.2236    3.2873    5.9170    9.2043    8.8758
    3.3518    3.0106    5.8438    8.8545    8.3602
    5.2755    4.1667    7.3755   11.5422   10.7656

>> %%% Full Data

>> AGB = ZachDatalnAGBlnDlnDHlnD2HlnD2HW (:, 1);

>> D = ZachDatalnAGBlnDlnDHlnD2HlnD2HW (:, 2);

>> DH = ZachDatalnAGBlnDlnDHlnD2HlnD2HW (:, 3);

>> D2H = ZachDatalnAGBlnDlnDHlnD2HlnD2HW (:, 4);

>> D2HW = ZachDatalnAGBlnDlnDHlnD2HlnD2HW (:, 5);

>> %%% Training Data

>> AGB_train = Train_Data (:, 1);

>> D_train = Train_Data (:, 2);

>> DH_train = Train_Data (:, 3);

>> D2H_train = Train_Data (:, 4);

>> D2HW_train = Train_Data (:, 5);

>> %%% Test Data

>> AGB_test = Test_Data (:, 1);

>> D_test = Test_Data (:, 2);

>> DH_test = Test_Data (:, 3);

>> D2H_test = Test_Data (:, 4);

>> D2HW_test = Test_Data (:, 2);

>> %%% Correlation Analysis of the Training Data

>> corr (AGB_train, D_train)

ans =  0.74209
>> corr (AGB_train, DH_train)

ans =  0.80114
>> corr (AGB_train, D2H_train)

ans =  0.79271
>> corr (AGB_train, D2HW_train)

ans =  0.83942
>> m_train = length (AGB_train)

m_train =  386
>> l_train = ones (m_train, 1);

>> %%% Correlation Analysis of the Test Data

>> corr (AGB_test, D_test)

ans =  0.83983
>> corr (AGB_test, DH_test)

ans =  0.87197
>> corr (AGB_test, D2H_test)

ans =  0.87042
>> corr (AGB_test, D2HW_test)

ans =  0.83983
>> m_test = length (AGB_test)

m_test =  96
>> l_test = ones (m_test, 1);

>> %%% X Variable . . .

>> X1_train = [l_train, D_train];

>> X2_train = [l_train, DH_train];

>> X3_train = [l_train, D2H_train];

>> X4_train = [l_train, D2HW_train];

>> X1_test = [l_test, D_test];

>> X2_test = [l_test, DH_test];

>> X3_test = [l_test, D2H_test];

>> X4_test = [l_test, D2HW_test];

>> %%% STOCHASTIC GRADIENT DESCENT %%%%%%%%

>> %% Initializing variables . . .

>> alpha = 0.001;

>> iterations = 1000;

>> %% Initializing decays . . . .

>> beta = 0.9;

>> beta_1 = 0.9;

>> beta_2 = 0.999;



>> min (RMSProp_Loss1)

ans =  0.10618
>> max (RMSProp_Loss1)

ans =  8.7730
>> RMSProp_theta1

RMSProp_theta1 =

   0.90298
   0.90298

>> min (RMSProp_Loss2)

ans =  0.095934
>> max (RMSProp_Loss2)

ans =  8.7730
>> RMSProp_theta2

RMSProp_theta2 =

   0.55232
   0.55232

>> min (RMSProp_Loss3)

ans =  0.091944
>> max (RMSProp_Loss3)

ans =  8.7730
>> RMSProp_theta3

RMSProp_theta3 =

   0.37311
   0.37311

>> min (RMSProp_Loss4)

ans =  0.077989
>> max (RMSProp_Loss4)

ans =  8.7730
>> RMSProp_theta4

RMSProp_theta4 =

   0.39189
   0.39189

>> AGBSGD_cap1RMSProp = X1_test * RMSProp_theta1;

>> AGBSGD_cap2RMSProp = X2_test * RMSProp_theta2;

>> AGBSGD_cap3RMSProp = X3_test * RMSProp_theta3;

>> AGBSGD_cap4RMSProp = X4_test * RMSProp_theta4;

>>



>> min (Adam_Loss1)

ans =  0.10620
>> max (Adam_Loss1)

ans =  8.7730
>> Adam_theta1

Adam_theta1 =

   0.90185
   0.90185

>> min (Adam_Loss2)

ans =  0.095934
>> max (Adam_Loss2)

ans =  8.7730
>> Adam_theta2

Adam_theta2 =

   0.55252
   0.55252

>> min (Adam_Loss3)

ans =  0.091944
>> max (Adam_Loss3)

ans =  8.7730
>> Adam_theta3

Adam_theta3 =

   0.37358
   0.37358

>> min (Adam_Loss4)

ans =  0.077989
>> max (Adam_Loss4)

ans =  8.7730
>> Adam_theta4

Adam_theta4 =

   0.39145
   0.39145

>> AGBSGD_cap1Adam = X1_test * Adam_theta1;

>> AGBSGD_cap2Adam = X2_test * Adam_theta2;

>> AGBSGD_cap3Adam = X3_test * Adam_theta3;

>> AGBSGD_cap4Adam = X4_test * Adam_theta4;

>>

>> %%%%%%%%% ACCURACY TEST FOR RMSPROP %%%%%%%%%%%%%%%%

>> %%% RUN STUDENT'S T-TEST DATA %%%%%

>> pkg load statistics

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap1RMSProp')

h = 0
pval =  0.65024
ci =

  -0.20249   0.12670

stats =

  scalar structure containing the fields:

    tstat = -0.45414
    df =  190
    sd =  0.57813

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap2RMSProp')

h = 0
pval =  0.61340
ci =

  -0.20240   0.11975

stats =

  scalar structure containing the fields:

    tstat = -0.50606
    df =  190
    sd =  0.56574

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap3RMSProp')

h = 0
pval =  0.65242
ci =

  -0.20359   0.12780

stats =

  scalar structure containing the fields:

    tstat = -0.45112
    df =  190
    sd =  0.58197

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap4RMSProp')

h =  1
pval = 0
ci =

   2.1831   2.4716

stats =

  scalar structure containing the fields:

    tstat =  31.817
    df =  190
    sd =  0.50678

>> %%%%%% Error Test

>> E_RMSProp1 = AGBSGD_cap1RMSProp - AGB_test;

>> E_RMSProp2 = AGBSGD_cap2RMSProp - AGB_test;

>> E_RMSProp3 = AGBSGD_cap3RMSProp - AGB_test;

>> E_RMSProp4 = AGBSGD_cap4RMSProp - AGB_test;

>> %%%%%% mean Absolute Error Test

>> MAE_RMSProp1 = sum(abs(E_RMSProp1)) /m_test

MAE_RMSProp1 =  0.32149
>> MAE_RMSProp2 = sum(abs(E_RMSProp2)) /m_test

MAE_RMSProp2 =  0.32376
>> MAE_RMSProp3 = sum(abs(E_RMSProp3)) /m_test

MAE_RMSProp3 =  0.30624
>> MAE_RMSProp4 = sum(abs(E_RMSProp4)) /m_test

MAE_RMSProp4 =  2.3274
>> %%%%%% Mean Square Error Test

>> MSE_RMSProp1 = sum((AGBSGD_cap1RMSProp - AGB_test).^2)/m_test

MSE_RMSProp1 =  0.16120
>> MSE_RMSProp2 = sum((AGBSGD_cap2RMSProp - AGB_test).^2)/m_test

MSE_RMSProp2 =  0.15448
>> MSE_RMSProp3 = sum((AGBSGD_cap3RMSProp - AGB_test).^2)/m_test

MSE_RMSProp3 =  0.13973
>> MSE_RMSProp4 = sum((AGBSGD_cap4RMSProp - AGB_test).^2)/m_test

MSE_RMSProp4 =  5.7071
>> %%%% Root Mean Square Error Test

>> RMSE_RMSProp1 = sqrt (sum((AGBSGD_cap1RMSProp - AGB_test).^2)/m_test)

RMSE_RMSProp1 =  0.40149
>> RMSE_RMSProp2 = sqrt (sum((AGBSGD_cap2RMSProp - AGB_test).^2)/m_test)

RMSE_RMSProp2 =  0.39304
>> RMSE_RMSProp3 = sqrt (sum((AGBSGD_cap3RMSProp - AGB_test).^2)/m_test)

RMSE_RMSProp3 =  0.37381
>> RMSE_RMSProp4 = sqrt (sum((AGBSGD_cap4RMSProp - AGB_test).^2)/m_test)

RMSE_RMSProp4 =  2.3890
>> %%%%% Percentage Error Test

>> PE_RMSProp1 = 100 * ((AGBSGD_cap1RMSProp - AGB_test) ./ AGB_test);

>> PE_RMSProp2 = 100 * ((AGBSGD_cap2RMSProp - AGB_test) ./ AGB_test);

>> PE_RMSProp3 = 100 * ((AGBSGD_cap3RMSProp - AGB_test) ./ AGB_test);

>> PE_RMSProp4 = 100 * ((AGBSGD_cap4RMSProp - AGB_test) ./ AGB_test);

>> %%%%%% Mean Absolute Percentage Error test

>> MAPE_RMSProp1 = sum(abs(PE_RMSProp1)) /m_test

MAPE_RMSProp1 =  8.0316
>> MAPE_RMSProp2 = sum(abs(PE_RMSProp2)) /m_test

MAPE_RMSProp2 =  8.0569
>> MAPE_RMSProp3 = sum(abs(PE_RMSProp3)) /m_test

MAPE_RMSProp3 =  7.6196
>> MAPE_RMSProp4 = sum(abs(PE_RMSProp4)) /m_test

MAPE_RMSProp4 =  55.630
>> %%%%%%%% ACCURACY TEST FOR ADAM %%%%%%%%%%%%%%%%%%%%%%

>> %%% RUN STUDENT'S T-TEST DATA %%%%%

>> pkg load statistics

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap1Adam')

h = 0
pval =  0.69566
ci =

  -0.19722   0.13186

stats =

  scalar structure containing the fields:

    tstat = -0.39178
    df =  190
    sd =  0.57792

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap2Adam')

h = 0
pval =  0.60082
ci =

  -0.20389   0.11828

stats =

  scalar structure containing the fields:

    tstat = -0.52411
    df =  190
    sd =  0.56579

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap3Adam')

h = 0
pval =  0.60804
ci =

  -0.20892   0.12259

stats =

  scalar structure containing the fields:

    tstat = -0.51373
    df =  190
    sd =  0.58219

>> [h, pval, ci, stats] = ttest2 (AGB_test', AGBSGD_cap4Adam')

h =  1
pval = 0
ci =

   2.1851   2.4737

stats =

  scalar structure containing the fields:

    tstat =  31.848
    df =  190
    sd =  0.50674

>> %%%%%% Error Test

>> E_Adam1 = AGBSGD_cap1Adam - AGB_test;

>> E_Adam2 = AGBSGD_cap2Adam - AGB_test;

>> E_Adam3 = AGBSGD_cap3Adam - AGB_test;

>> E_Adam4 = AGBSGD_cap4Adam - AGB_test;

>> %%%%%% mean Absolute Error Test

>> MAE_Adam1 = sum(abs(E_Adam1)) /m_test

MAE_Adam1 =  0.32102
>> MAE_Adam2 = sum(abs(E_Adam2)) /m_test

MAE_Adam2 =  0.32399
>> MAE_Adam3 = sum(abs(E_Adam3)) /m_test

MAE_Adam3 =  0.30714
>> MAE_Adam4 = sum(abs(E_Adam4)) /m_test

MAE_Adam4 =  2.3294
>> %%%%%% Mean Square Error Test

>> MSE_Adam1 = sum((AGBSGD_cap1Adam - AGB_test).^2)/m_test

MSE_Adam1 =  0.16098
>> MSE_Adam2 = sum((AGBSGD_cap2Adam - AGB_test).^2)/m_test

MSE_Adam2 =  0.15455
>> MSE_Adam3 = sum((AGBSGD_cap3Adam - AGB_test).^2)/m_test

MSE_Adam3 =  0.13999
>> MSE_Adam4 = sum((AGBSGD_cap4Adam - AGB_test).^2)/m_test

MSE_Adam4 =  5.7169
>> %%%% Root Mean Square Error Test

>> RMSE_Adam1 = sqrt (sum((AGBSGD_cap1Adam - AGB_test).^2)/m_test)

RMSE_Adam1 =  0.40123
>> RMSE_Adam2 = sqrt (sum((AGBSGD_cap2Adam - AGB_test).^2)/m_test)

RMSE_Adam2 =  0.39313
>> RMSE_Adam3 = sqrt (sum((AGBSGD_cap3Adam - AGB_test).^2)/m_test)

RMSE_Adam3 =  0.37415
>> RMSE_Adam4 = sqrt (sum((AGBSGD_cap4Adam - AGB_test).^2)/m_test)

RMSE_Adam4 =  2.3910
>> %%%%% Percentage Error Test

>> PE_Adam1 = 100 * ((AGBSGD_cap1Adam - AGB_test) ./ AGB_test);

>> PE_Adam2 = 100 * ((AGBSGD_cap2Adam - AGB_test) ./ AGB_test);

>> PE_Adam3 = 100 * ((AGBSGD_cap3Adam - AGB_test) ./ AGB_test);

>> PE_Adam4 = 100 * ((AGBSGD_cap4Adam - AGB_test) ./ AGB_test);

>> %%%%%% Mean Absolute Percentage Error test

>> MAPE_Adam1 = sum(abs(PE_Adam1)) /m_test

MAPE_Adam1 =  8.0060
>> MAPE_Adam2 = sum(abs(PE_Adam2)) /m_test

MAPE_Adam2 =  8.0663
>> MAPE_Adam3 = sum(abs(PE_Adam3)) /m_test

MAPE_Adam3 =  7.6555
>> MAPE_Adam4 = sum(abs(PE_Adam4)) /m_test

MAPE_Adam4 =  55.680
>>
￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿
￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿
￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿
￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿
￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿
￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿￿





















